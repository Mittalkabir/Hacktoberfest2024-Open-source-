import heapq

def kthSmallest(matrix, k):
    n = len(matrix)
    min_heap = [(matrix[i][0], i, 0) for i in range(n)]
    heapq.heapify(min_heap)
    
    while k > 1:
        val, r, c = heapq.heappop(min_heap)
        if c + 1 < len(matrix[0]):
            heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))
        k -= 1
    return heapq.heappop(min_heap)[0]

matrix = [
    [1, 5, 9],
    [10, 11, 13],
    [12, 13, 15]
]
k = 8
print(kthSmallest(matrix, k))  # Output: 13
